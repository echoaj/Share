# 1) Services that must not be disabled
$svc = Get-Service wuauserv,bits,dosvc -ErrorAction SilentlyContinue |
       Select Name, Status, StartType

# 2) Policy switches that commonly block updates
$pol = [pscustomobject]@{
  NoAutoUpdate              = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name NoAutoUpdate -ErrorAction SilentlyContinue).NoAutoUpdate
  DisableWindowsUpdateAccess= (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate'    -Name DisableWindowsUpdateAccess -ErrorAction SilentlyContinue).DisableWindowsUpdateAccess
  UseWUServer               = (Get-ItemProperty -Path 'HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU' -Name UseWUServer -ErrorAction SilentlyContinue).UseWUServer
}

# 3) Try an actual scan (strongest proof)
try {
  $session  = New-Object -ComObject Microsoft.Update.Session
  $searcher = $session.CreateUpdateSearcher()
  $res      = $searcher.Search("IsInstalled=0 and Type='Software'")  # scan allowed if this completes
  $scanCode = $res.ResultCode   # 2=Succeeded, 3=SucceededWithErrors, 4=Failed, 5=Aborted
} catch {
  $scanCode = 4  # treat as failed
}

# 4) Last successful update events (optional corroboration)
$evt = Get-WinEvent -FilterHashtable @{
  LogName='System'; Id=@(19,20,43); ProviderName='Microsoft-Windows-WindowsUpdateClient'
} -ErrorAction SilentlyContinue | Select -First 1 -Property Id,TimeCreated,Message

# 5) Decide
$servicesOK = @('wuauserv','bits','dosvc') -notmatch ($svc | Where-Object { $_.Status -eq 'Stopped' -or $_.StartType -eq 'Disabled' } | ForEach-Object Name)
$policyOK   = -not ($pol.DisableWindowsUpdateAccess -eq 1)
$scanOK     = $scanCode -in 2,3

$result = [pscustomobject]@{
  Services     = $svc
  Policy       = $pol
  ScanResult   = $scanCode
  AnyWUEvent   = $evt
  UpdatesPermitted = ($servicesOK -and $policyOK -and $scanOK)
}

$result | Format-List
if (-not $result.UpdatesPermitted) { exit 1 } else { exit 0 }


$searcher = (New-Object -ComObject Microsoft.Update.Session).CreateUpdateSearcher()
$scan = $searcher.Search("IsInstalled=0 and Type='Software'"); $scan.ResultCode
# Expect 2 (Succeeded) or 3 (SucceededWithErrors)

