before_script:
  - /bin/packer version
  - echo $CI_PROJECT_DIR

variables:
  VM_TO_CLONE: 'Machine1'
  VERSION: $EXPORT_VERSION
  TEST: 'true'                    # Change to false if exporting VM_TO_CLONE
  ZIP: 'zip'
  ISO: 'iso'
  EXPORT_FORMAT: $ZIP


stages:
  - build

build-job: 
  stage: build
  tags:
    - mrd-biner-sam

  script: 
    - |

      if $TEST; then
        echo -e "$YELLOW=========== TESTING ENABLED ==========="
        VM_TO_CLONE=Test-Dev-WS20
      else
        echo -e "$HEADER=========== TESTING DISABLED ===========$END"
      fi

      DATE_WITH_TIME=`date "+%Y%m%d-%H%M%S"`
      VM_EXPORT_NAME=EXPORT-$VM_TO_CLONE
      VCENTER_EXPORT_FOLDER=Cyber/WSUS/Pipeline-Exports
      END_POINT=$VM_TO_CLONE/$VERSION/$DATE_WITH_TIME
      NEXUS_BASE_REPO_URL=https://nexus.com/repo/cyb
      RELEASE_FILE=release-notes.txt

      echo VM_TO_CLONE = $VM_TO_CLONE
      echo VERSION = $VERSION
      echo VM_EXPORT_NAME = $VM_EXPORT_NAME
      echo VCENTER_EXPORT_FOLDER = $VCENTER_EXPORT_FOLDER
      echo -e DATE_WITH_TIME = $DATE_WITH_TIME $END
    
    # Exit immediately if a bash command fails.
    - |
      set -e

    # Creating release file containing COTS being installed and version number of delivery  
    - |
      echo "Recording version number in release notes ..."     
      echo "DevSecOps Release Version:" $EXPORT_VERSION > $RELEASE_FILE
      echo "W20" >> $RELEASE_FILE

    # Purpose: Validate packer configuration
    - |  
      echo -e "$HEADER=========== PACKER VALIDATE ===========$END"
      echo Validating packer build ...
      /bin/packer validate \
          -var VCENTER_ACCOUNT_USR=$VSPHERE_USERNAME \
          -var VCENTER_ACCOUNT_PSW=$VSPHERE_PASSWORD \
          -var SERVICE_ACCOUNT_USR=$C_SERVICE_ACCOUNT_USR \
          -var SERVICE_ACCOUNT_PSW=$C_SERVICE_ACCOUNT_PSW \
          -var vm_to_clone_name=$VM_TO_CLONE \
          -var cloned_vm_name=$VM_EXPORT_NAME \
          -var vcenter_cloned_folder_location=$VCENTER_EXPORT_FOLDER \
          -var release_file=$RELEASE_FILE \
          builds/clone-factory/windows/
    
    # Purpose: Build takes a template and runs all the builds within it in order
    #          to generate a set of artifacts.
    # Flags:   -force = Forces a builder to run when artifacts from a previous 
    #                   build prevent a build from running. The exact behavior 
    #                   of a forced build is left to the builder. VMware builder
    #                   will overwrite the VM if it exists. 
    - |
      echo -e "$HEADER=========== PACKER BUILD ===========$END"
      echo Building packer VM [$VM_TO_CLONE-$VERSION] ...
      /bin/packer build -force \
        -var VCENTER_ACCOUNT_USR=$VSPHERE_USERNAME \
        -var VCENTER_ACCOUNT_PSW=$VSPHERE_PASSWORD \
        -var SERVICE_ACCOUNT_USR=$C_SERVICE_ACCOUNT_USR \
        -var SERVICE_ACCOUNT_PSW=$C_SERVICE_ACCOUNT_PSW \
        -var vm_to_clone_name=$VM_TO_CLONE \
        -var cloned_vm_name=$VM_EXPORT_NAME \
        -var vcenter_cloned_folder_location=$VCENTER_EXPORT_FOLDER \
        -var release_file=$RELEASE_FILE \
        builds/clone-factory/windows/

    # Purpose: Packer VMware builder generates three artifacts as part of the cloning 
    #          process. The purpose here is to dynamically create 3 artifact names 
    #          with the name of the VM that was cloned. Addtionally, create name 
    #          for zip file export. 
    - |
      FILE_VMDK=$VM_EXPORT_NAME-disk-0.vmdk
      FILE_MF=$VM_EXPORT_NAME.mf
      FILE_OVF=$VM_EXPORT_NAME.ovf
      FILE_ZIP=$VM_EXPORT_NAME-$VERSION-$DATE_WITH_TIME.$EXPORT_FORMAT

    # Purpose: Dynamically set the full file path of the artifact files that were
    #          downloaded to the build agent from vCenter.   
    - |
      ARTIFACT_DIR=$CI_PROJECT_DIR/artifacts
      ARTIFACT_PATH=$CI_PROJECT_DIR/artifacts/$VM_EXPORT_NAME
      
      ARTIFACT_PATH_VMDK=$ARTIFACT_PATH/$FILE_VMDK
      ARTIFACT_PATH_MF=$ARTIFACT_PATH/$FILE_MF
      ARTIFACT_PATH_OVF=$ARTIFACT_PATH/$FILE_OVF
      ARTIFACT_PATH_ZIP=$ARTIFACT_DIR/$FILE_ZIP

    # Move the release notes file to the artifact path to be zipped up. 
    - |
      cp $RELEASE_FILE $ARTIFACT_PATH
    
    # Purpoes: Set zip file export artifact
    - |
      zip -r -j artifacts/$FILE_ZIP $ARTIFACT_PATH
