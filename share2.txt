---

- tags: 
    - req1-SDSO-8167
    - SDSO-8167
  block:
    - name: The Windows Operating System Workstation shall generate an event log for failed directory access.
      ansible.builtin.meta: noop
    
    - name: Initialize test result tracker
      ansible.builtin.set_fact:
        test_results: {}

    - name: Create directory in C:\
      ansible.builtin.win_file: 
        path: C:\{{ test_directory }}
        state: directory

    # - name: Set deny permissions on user
    #   ansible.builtin.win_acl:
    #     path: C:\{{ test_directory }}
    #     user: Administrators
    #     rights: 'FullControl'
    #     type: 'deny'
    
    - name: Set audit rule 
      ansible.builtin.win_audit_rule:
        path: C:\{{ test_directory }}
        user: Administrators
        principal: Everyone
        rights: FullControl
        audit_flags: failure

     # Capture TIMESTAMP before triggering directory access failure
    - name: Capture timestamp before triggering event log
      ansible.windows.win_shell: '(Get-Date).ToString("o")'
      register: check_start                                     # Capture output of a task and store in a variable
      changed_when: false                                       # Ensures task is not marked as changed

    # Trigger directory access FAILURE event log
    - name: Attempt to access C:\{{ test_directory }} 
      ansible.windows.win_shell: |
        try {
          Get-ChildItem -LiteralPath 'C:\{{ test_directory }}' -Force | Out-Null
        } catch {
          # Failure expected due to deny ACL
        }
      # ignore_errors: true                                     # If off, test results are empty indicating runtime error
      register: response                                        # Capture stdout into response variabe
      failed_when: response.rc == 0                             # Go to rescue block if response code is successful
      changed_when: false                                       # Task won't be marked as changed by ansible
    
    # Allow time for event log to generate
    - name: Sleep for event long write
      ansible.builtin.pause:
        seconds: 3

    # Query Event ID 4656 since Start Time
    - name: Query ID 4656 since start time
      ansible.windows.win_shell: |
        $Start = [datetime]::Parse('{{ check_start.stdout | trim }}')
        $events = Get-WinEvent -FilterHashtable @{ LogName='Security'; Id=4656; StartTime=$Start }
        $eventCount = $events.Count
        $eventResult = $null
        foreach ($evt in $events) {
          $message = $evt.FormatDescription().Split("`n")[0].Trim()
          if ($evt.KeywordsDisplayNames -contains 'Audit Failure') {
            $eventResult = [PSCustomObject]@{
              id          = $evt.Id
              found       = $true
              timestamp   = $evt.TimeCreated.ToString("yyyy-MM-dd HH:mm:ss")
              audit       = 'Audit Failure'
              logName     = $evt.LogName
              summary     = "Event ID 4656 ($message) FOUND out of $eventCount event(s)."
            }
            break
          }
        }

        if ($null -eq $eventResult) {
          $eventResult = [PSCustomObject]@{
            id          = $null
            found       = $false
            timestamp   = $null
            audit       = $null
            logName     = $null
            summary     = "Event ID 4656 NOT FOUND out of $eventCount event(s)."
          }
        }
        $eventResult | ConvertTo-Json -Depth 5
      register: evt_check
      changed_when: false

  
    # Convert stdout to json to get key value pairs
    - name: Parse event check result
      ansible.builtin.set_fact:
        audit_result: "{{ evt_check.stdout | from_json }}"

    - name: Show event summary
      ansible.builtin.debug:
        var: audit_result

    # Add another block here that checks if audit_result is true
    - name: If Audit Failure, continue as normal otherwise go to rescue block
      ansible.builtin.assert:
        that:
          - audit_result.found
        success_msg: "Audit Failure - continue normally"
        fail_msg: "Not an Audit Failure - trigger rescue"       
      changed_when: false 

    - name: Set test result - pass/fail
      ansible.builtin.set_fact:
        test_results: >-
          {{ test_results | combine({
             'SDSO-8167': 'Req 1',
             ('Pass' if audit_result.found | bool else 'Fail'): 'The Windows Operating System Workstation shall generate an event log for failed directory access.'
          }) }}

  rescue:
    - name: Rule check has failed - setting test results
      ansible.builtin.set_fact:
        test_results: >-
          {{ test_results | combine({
             'SDSO-8167': "Req 1",
             ('Pass' if audit_result.found | bool else 'Fail'): 'The Windows Operating System Workstation shall generate an event log for failed directory access.'
          }) }}

    - name: Display error message
      ansible.builtin.debug:
        msg: "{{ ansible_failed_result }}"

  always:
  - name: Check if C:\{{ test_directory }} exists
    ansible.windows.win_stat:
      path: C:\{{ test_directory }}
    register: dir_check

  - name: Remove deny permissions on user
    ansible.builtin.win_acl:
      path: C:\{{ test_directory }}
      user: Administrators
      rights: 'FullControl'
      type: 'deny'
      state: absent
    when: dir_check.stat.exists

  - name: Remove C:\{{ test_directory }}
    ansible.windows.win_file:
      path: C:\{{ test_directory }}
      state: absent
    when: dir_check.stat.exists
  
  - name: Display final test results
    ansible.builtin.debug:
      var: test_results
